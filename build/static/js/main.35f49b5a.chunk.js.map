{"version":3,"sources":["http.js","components/navbar/Navbar.js","components/modal/index.js","components/photogrid/Photogrid.js","App.js","reportWebVitals.js","index.js"],"names":["apiKey","queryParams","fetchData","a","option","searchTerm","page","fetch","response","json","data","Navbar","timer","input","useRef","useState","results","setresults","setSearchTerm","list","setList","tags","setTags","totalResult","setTotalResults","loading","setLoading","useEffect","current","focus","localStorage","getItem","JSON","parse","updateSearch","value","then","photos","photo","updateSearchHistory","catch","error","console","updateSearchTags","oldSearchTags","find","ele","unshift","setItem","stringify","className","type","placeholder","ref","onChange","func","delay","clearTimeout","setTimeout","onClick","length","map","index","title","e","stopPropagation","item","picData","closeModal","src","Photogrid","recent","setRecent","modalData","setModalData","modal","setModal","setPage","fetchRecent","recentResults","srcPath","farm","server","id","secret","alt","concat","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35f49b5a.chunk.js","sourcesContent":["const apiKey = '72cede6a9c2b1adf4a0ca77b55928f74'\r\nconst baseURL = 'https://www.flickr.com/services/rest/'\r\nlet queryParams = ''\r\n\r\nexport  const fetchData = async ({option,searchTerm,page}) => {\r\n    switch(option){\r\n        case 'search': queryParams = `?method=flickr.photos.search&api_key=${apiKey}&text=${searchTerm}&format=json&nojsoncallback=1`\r\n            break;\r\n        \r\n        case 'recent': queryParams = `?method=flickr.photos.getRecent&api_key=${apiKey}&page=${page}&format=json&nojsoncallback=1`\r\n            break; \r\n        default:       \r\n    }\r\n    \r\n    let response = await fetch(`${baseURL}${queryParams}`)\r\n    let data =  await response.json()\r\n    return  data\r\n}","import React,{useRef,useEffect,useState} from 'react'\r\nimport './style.css'\r\nimport {fetchData} from '../../http'\r\n\r\nfunction Navbar() {\r\n\r\n    const input = useRef(null)\r\n    const [results, setresults] = useState([])\r\n    const [searchTerm, setSearchTerm] = useState('')\r\n    const [list , setList] = useState(false)\r\n    const [tags , setTags] = useState([])\r\n    const [totalResult,setTotalResults] = useState(false)\r\n    const [loading , setLoading] = useState(false)\r\n\r\n    let timer ;\r\n    const debounce = ( func , delay) => {\r\n        (function(){\r\n            clearTimeout(timer);\r\n            timer = setTimeout(func , delay );\r\n        })()\r\n    }\r\n\r\n    useEffect(() => {\r\n        input.current.focus();\r\n        if(localStorage.getItem('searchTags')){\r\n            setTags(JSON.parse(localStorage.getItem('searchTags')))\r\n        }\r\n    }, [])\r\n\r\n    const updateSearch = () => {\r\n        const searchTerm = input.current.value;\r\n        let updateSearchTags = null ;\r\n        setLoading(true)\r\n        fetchData({option:'search',searchTerm})\r\n        .then(data => {setresults(data.photos.photo);\r\n                        updateSearchTags=searchTerm\r\n                        updateSearchHistory(updateSearchTags) })\r\n        .catch( error => console.error(error))\r\n        setSearchTerm(searchTerm)\r\n        setTotalResults(false)\r\n        setLoading(false)\r\n        \r\n    }\r\n\r\n    const updateSearchHistory =  (updateSearchTags) => {\r\n\r\n        if(localStorage.getItem('searchTags') && updateSearchTags){\r\n            let oldSearchTags = JSON.parse(localStorage.getItem('searchTags'))\r\n            if(!oldSearchTags.find( ele => ele === updateSearchTags)){\r\n                oldSearchTags.unshift(updateSearchTags)\r\n                localStorage.setItem('searchTags',JSON.stringify(oldSearchTags))\r\n            }\r\n            setTags(oldSearchTags)\r\n        }else if(updateSearchTags){\r\n            localStorage.setItem('searchTags',JSON.stringify([updateSearchTags]))\r\n            setTags([updateSearchTags])\r\n        }\r\n    }\r\n\r\n    // const truncate =  (str,n) => {\r\n    //     return str.length > n ? str.substr(n-1) + '...' : str \r\n    // } \r\n\r\n    return (\r\n        <div className=\"navbar-container\">\r\n            <h1 className=\"navbar-title\">Search Photos</h1>\r\n            <input type=\"search\" className=\"navbar-searchBar\"\r\n             placeholder=\"Search\" ref={input} \r\n             onChange={ () => debounce(updateSearch , 2000 )}\r\n             onClick={() => setList(!list)}\r\n             />\r\n             { results.length > 0 ? list && searchTerm.length > 0 &&\r\n                <div className=\"searchResults\" >\r\n                    <ul>\r\n                    {!totalResult && results.map( (data, index) =>{ if( index < 5 ) \r\n                        return <li className=\"searchResults-list-item\" key={index}>{data.title}</li> })} \r\n                    {totalResult && results.map( (data, index) => <li className=\"searchResults-list-item\" key={index}>{data.title}</li> )}    \r\n                    </ul>\r\n                    { !totalResult && <div className=\"results-length\"\r\n                     onClick={(e) => { setTotalResults(true)\r\n                                        e.stopPropagation()\r\n                                       setList(true)  } }>More than {results.length} results</div>}\r\n                </div> :\r\n                list && searchTerm.length > 0 && !loading && <div className=\"searchResults\">\r\n                    No results\r\n                </div>  }\r\n              { <div className=\"navbar-tags\">\r\n                    {tags.map(( item, index ) => {\r\n                        return  <div className=\"tags\" key={index}>\r\n                                    {item}\r\n                                </div>\r\n                    })}\r\n                </div>}  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport './style.css'\r\n\r\nfunction index({ picData,closeModal} ) {\r\n    return (\r\n        <div className=\"modal-container\" onClick={() => closeModal()}>\r\n            <img   src={picData} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default index\r\n","import React,{useEffect,useState} from 'react'\r\nimport './style.css'\r\nimport {fetchData} from '../../http'\r\nimport Modal from '../modal/index'\r\n\r\nfunction Photogrid() {\r\n    const [recent , setRecent] = useState([])\r\n    const [modalData , setModalData] = useState('')\r\n    const [modal , setModal] = useState(false);\r\n    const [page, setPage] = useState(1)\r\n\r\n    const closeModal = () => {\r\n        setModal(false)\r\n    }\r\n\r\n    // let timer ;\r\n\r\n    // const checkScroll = (e) => {\r\n    // if(e.target.scrollHeight <= e.target.scrollTop + e.target.clientHeight){\r\n    //             fetchRecent(page)\r\n        \r\n    // }\r\n        \r\n    // }\r\n\r\n    const fetchRecent = (page) => {\r\n        fetchData({option:'recent',page:page})\r\n       .then(data =>  { \r\n           const recentResults = data.photos.photo.map( (item ) => {\r\n           const srcPath = `https://farm${item.farm}.staticflickr.com/${item.server}/${item.id}_${item.secret}.jpg`\r\n           return <div className=\"photoGrid-item\" >\r\n                        <img onClick={() =>  { setModalData(srcPath) \r\n                                                setModal(true) }} alt={item.title}  src={srcPath} />\r\n                  </div>\r\n       })\r\n        setRecent(recent.concat(recentResults))\r\n        setPage(page + 1)\r\n     }) \r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchRecent(1);        \r\n    }, [])\r\n    \r\n    // useEffect(() => {\r\n    //     document.querySelector('.photoGrid-container')\r\n    //     .addEventListener('scroll',checkScroll);\r\n    //     return () => {\r\n    //         document.querySelector('.photoGrid-container')\r\n    //         .removeEventListener('scroll',checkScroll); \r\n    //     }\r\n    // }, [])\r\n\r\n    \r\n    return (    <>\r\n                <div className=\"photoGrid-container\">          \r\n                    {recent}\r\n                </div>\r\n                {modalData && modal ? <Modal picData={modalData} closeModal={closeModal} /> : ''}\r\n                <button className=\"loadMore\" onClick={() => fetchRecent(page)}>Load More</button>\r\n                </>\r\n        \r\n    )\r\n}\r\n\r\nexport default Photogrid\r\n","import './App.css';\nimport Navbar from './components/navbar/Navbar';\nimport Photogrid from './components/photogrid/Photogrid';\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Navbar />\n        <Photogrid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}